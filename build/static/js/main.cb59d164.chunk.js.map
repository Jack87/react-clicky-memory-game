{"version":3,"sources":["components/Thumbnail/index.js","components/Nav/index.js","components/Header/index.js","components/Container/index.js","components/Row/index.js","components/Footer/index.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["Thumbnail","props","react_default","a","createElement","className","id","class","onClick","handleItemClick","src","image","alt","name","Nav","href","stateMsg","score","topScore","Header","Container","children","Row","Footer","Game","state","data","thumbClass","isCorrectClass","handleCorrectGuess","newData","_this$state","_this","newScore","newTopScore","Math","max","setState","shuffleData","setTimeout","alert","handleIncorrectGuess","resetData","map","item","Object","objectSpread","clicked","i","length","j","floor","random","temp","guessedCorrectly","newItem","this","_this2","components_Nav","components_Header","components_Container","components_Row","components_Thumbnail","key","shake","components_Footer","Component","App","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb59d164.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Thumbnail = props => (\r\n    <div className=\"text-center col-3\" id=\"game\">\r\n        <img \r\n            className={props.class}\r\n            // key={props.key}\r\n            id={props.id}\r\n            onClick={() => props.handleItemClick(props.id)}\r\n            src={props.image} \r\n            alt={props.name}              \r\n        />\r\n    </div>\r\n);\r\n\r\nexport default Thumbnail;","import React from \"react\";\r\n\r\nconst Nav = props => (\r\n    <nav className=\"navbar\">\r\n        <ul className=\"row\">\r\n            <li className=\"brand col-4\"><a href=\"/\">Starcraft 2 Units: Clicky Game</a></li>\r\n            <li className={props.class}>{props.stateMsg}</li>\r\n            <li className=\"col-4\">Score: {props.score} | Top Score: {props.topScore}</li>\r\n        </ul>\r\n    </nav>\r\n);\r\n\r\nexport default Nav;","import React from \"react\";\r\n\r\nconst Header = props => (\r\n  <div className=\"header\">\r\n    <div className=\"title\">\r\n        <br></br><br></br>\r\n        <h1 className=\"\">Starcraft 2 Units: Clicky Game</h1>\r\n        <h2 className=\"\">Click on an image to earn points, but don't click on any more than once or back to zero you go!</h2>\r\n        <a href=\"#game\" class=\"btn btn-primary js-scroll-trigger\">Play</a>\r\n\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nconst Container = props => <div className=\"container\">{props.children}</div>;\r\n\r\nexport default Container;","import React from \"react\";\r\n\r\nconst Row = props => <div className=\"row bg1\">{props.children}</div>;\r\n\r\nexport default Row;","import React from \"react\";\r\n\r\nconst Footer = props => (\r\n\r\n    <footer className=\"footer\">\r\n        <div className=\"bottom\">\r\n            Clicky Game by Akop! <img alt=\"react\" src=\"assets/images/react.svg\" />\r\n        </div>\r\n    </footer>\r\n);\r\n\r\nexport default Footer;","import React, { Component } from \"react\";\r\nimport Thumbnail from \"../Thumbnail\";\r\nimport Nav from \"../Nav\";\r\nimport Header from \"../Header\";\r\nimport Container from \"../Container\";\r\nimport Row from \"../Row\";\r\nimport Footer from \"../Footer\";\r\nimport data from \"../../portraits.json\";\r\n\r\nclass Game extends Component {\r\n    state = {\r\n        data,\r\n        score: 0,\r\n        topScore: 0,\r\n        stateMsg: \"Click an image to begin!\",\r\n        thumbClass: \"img-thumbnail zoom m-1 p-2 click-item\",\r\n        isCorrectClass: \"col-4\"\r\n    };\r\n    \r\n    componentDidMount() {\r\n        this.setState({ data: this.shuffleData(this.state.data) });\r\n    };\r\n\r\n    handleCorrectGuess = newData => {\r\n        const { topScore, score } = this.state;\r\n        const newScore = score + 1;\r\n        const newTopScore = Math.max(newScore, topScore);\r\n        this.setState({\r\n            data: this.shuffleData(newData),\r\n            score: newScore,\r\n            topScore: newTopScore,\r\n            stateMsg: \"You got it... Keep going!\",\r\n            thumbClass: \"img-thumbnail zoom m-1 p-2 click-item\",\r\n            isCorrectClass: \"col-4 correct\"\r\n        });\r\n        setTimeout(() => this.setState({isCorrectClass: \"col-4\"}), 500);\r\n        if(newScore === 12) {\r\n            alert(\"You won!\");\r\n            this.setState({isCorrectClass: \"col-4 correct\"});\r\n        }\r\n    };\r\n\r\n    handleIncorrectGuess = data => {\r\n        this.setState({\r\n            data: this.resetData(data),\r\n            score: 0,\r\n            stateMsg: \"You already picked that; start over!\",\r\n            thumbClass: \"shake img-thumbnail zoom m-1 p-2 click-item\",\r\n            isCorrectClass: \"col-4 incorrect\"            \r\n        });\r\n        // alert(\"Try again!\");\r\n    };\r\n\r\n    resetData = data => {\r\n        const resetData = data.map(item => ({ ...item, clicked: false}));\r\n        return this.shuffleData(resetData);\r\n    };\r\n\r\n    shuffleData = data => {\r\n        let i=data.length - 1;\r\n        while (i > 0) {\r\n            const j=Math.floor(Math.random() * (i + 1));\r\n            const temp = data[i];\r\n            // eslint-disable-next-line\r\n            data[i] = data [j];\r\n            data[j] = temp;\r\n            i--;\r\n        };\r\n        return data;\r\n    };\r\n\r\n    handleItemClick = id => {\r\n        let guessedCorrectly = false;\r\n        const newData= this.state.data.map(item => {\r\n            const newItem= { ...item };\r\n            // console.log(\"new id: \" + newItem.id)\r\n            if (newItem.id === id) {\r\n                if (!newItem.clicked) {\r\n                    newItem.clicked = true;\r\n                    guessedCorrectly = true;\r\n                };\r\n            };\r\n            return newItem;\r\n        });\r\n        guessedCorrectly ? this.handleCorrectGuess(newData) : this.handleIncorrectGuess(newData);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Nav score={this.state.score} topScore={this.state.topScore} stateMsg={this.state.stateMsg} class={this.state.isCorrectClass}/>\r\n                <Header />\r\n                <Container>\r\n                    <Row>\r\n                        {this.state.data.map(item => (\r\n                            <Thumbnail \r\n                                key={item.id}\r\n                                id={item.id}\r\n                                shake={!this.state.score && this.state.topScore}\r\n                                handleItemClick={this.handleItemClick}\r\n                                image={item.image}\r\n                                name={item.name}\r\n                                class={this.state.thumbClass}\r\n                            />\r\n                        ))}\r\n                    </Row>\r\n                </Container>\r\n                <Footer />\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default Game;\r\n\r\n","import React from 'react';\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}